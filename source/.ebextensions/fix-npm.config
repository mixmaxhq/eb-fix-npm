# This file is controlled by the `eb-fix-npm` Node module. If you'd like to
# modify it, you either should publish a new version of that module and update
# to that version; or, you should uninstall that module and then edit this file
# --uninstallation won't take the file with it.

# This file contains fixes for npm. Node is installed using a hook called
# "40install_node.sh" and `npm install` is run using a hook called "50npm.sh",
# so npm setup should be done in hooks beginning with "4x" (x > 0)
# and cleanup should be done in hooks beginning with "5x" (x > 0).

files:
  "/opt/elasticbeanstalk/env.vars":
    mode: "000775"
    owner: root
    group: users
    content: |
      # Defines variables for use by the other scripts below.

      EB_NODE_VERSION=$(/opt/elasticbeanstalk/bin/get-config optionsettings -n aws:elasticbeanstalk:container:nodejs -o NodeVersion)

      # Exported to make sure Node binaries can be found by npm when we run it.
      # And this lets us invoke npm more simply too.
      export PATH=/opt/elasticbeanstalk/node-install/node-v$EB_NODE_VERSION-linux-x64/bin:$PATH

      # For parity with EB https://gist.github.com/wearhere/de51bb799f5099cec0ed28b9d0eb3663#file-ebnode-py-L147
      # and because some npm packages require HOME. This will also get npm to
      # read its configuration from the proper directory.
      export HOME=$(/opt/elasticbeanstalk/bin/get-config container -k app_user_home)

      EB_APP_STAGING_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_staging_dir)
      EB_APP_DEPLOY_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_dir)

      # Export the user's environment variables for use with npm, both because
      # EB does it https://gist.github.com/wearhere/de51bb799f5099cec0ed28b9d0eb3663#file-ebnode-py-L150
      # as well as because we might need NPM_TOKEN.
      #
      # I wish this was a heredoc but I can't get the syntax right in YAML,
      # EB gives an error "warning: here-document delimited by end-of-file (wanted `EOS`)"
      eval $(node -e "var vars = JSON.parse('$(/opt/elasticbeanstalk/bin/get-config environment)'); console.log(Object.keys(vars).map((key) => \`export \${key}=\"\${vars[key]}\"\`).join('\n'));")

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/45npm_downgrade.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Make sure that we're using npm 2 because npm 3 is too slow to install for EB.

      . /opt/elasticbeanstalk/env.vars

      if [ $(npm -v) != "2.15.9" ]; then
        echo "Downgrading npm to 2.15.9..."
        npm install npm@2.15.9 -g
      else
        echo "npm already at 2.15.9"
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/46cache_node_modules.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Cache Node modules in /var.
      
      . /opt/elasticbeanstalk/env.vars

      CACHE_DIR=/var/node_modules

      if [ ! -d $CACHE_DIR ]; then
        mkdir $CACHE_DIR
      fi
      ln -s $CACHE_DIR $EB_APP_STAGING_DIR

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/50npm.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Only install modules, don't rebuild like Elastic Beanstalk does by default:
      # https://gist.github.com/wearhere/de51bb799f5099cec0ed28b9d0eb3663.
      # New modules will be built when they are installed, and cached modules don't
      # need to be rebuilt. When the Node version changes, the configdeploy script
      # will rebuild.
      #
      #
      # Note that this *overwrites* Elastic Beanstalk's default 50npm.sh script.
      
      . /opt/elasticbeanstalk/env.vars

      cd $EB_APP_STAGING_DIR            

      if [ -d node_modules ]; then # If there is an already existent node_modules in the deployed app (built by the AWS CodeBuild) 
        npm_rebuild --production   # don't run npm install but run npm rebuild --production
      else
        npm install --production       # run npm install --production
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/55npm_cleanup.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Remove all npm tmp files leftover by npm shrinkwrap flow.
      # https://github.com/npm/npm/issues/6855

      rm -rf /tmp/npm-*

  "/opt/elasticbeanstalk/hooks/configdeploy/pre/50npm.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Only rebuild modules, don't install like Elastic Beanstalk tries to do
      * by default: https://gist.github.com/wearhere/de51bb799f5099cec0ed28b9d0eb3663.
      # package.json isn't changing on a config deploy, and all the existing
      # modules should be cached.
      #
      # Note that this *overwrites* Elastic Beanstalk's default 50npm.sh script.
      # But their default script actually doesn't work at all, since the app
      # staging dir, where they try to run `npm install`, doesn't exist during
      # config deploys, so ebnode.py just aborts:
      # https://gist.github.com/wearhere/de51bb799f5099cec0ed28b9d0eb3663#file-ebnode-py-L140
      
      . /opt/elasticbeanstalk/env.vars

      cd $EB_APP_DEPLOY_DIR && npm rebuild --production
